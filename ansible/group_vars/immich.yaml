---
# ironicbadger.docker_compose_generator
docker_compose_generator_output_path: "{{services_path}}"

# global vars
global_env_vars:
  - "PUID={{ docker_compose_generator_uid }}"
  - "PGID={{ docker_compose_generator_gid }}"
  - "UMASK={{ docker_compose_generator_umask }}"
  - "TZ={{ ntp_timezone }}"

containers:
###
  - service_name: portainer
    active: true
    image: portainer/portainer-ce:latest
    ports:
      - 9443:9443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - "{{appdata_path}}/portainer_data:/data"
    restart: always
###
  - service_name: watchtower
    active: true
    image: containrrr/watchtower:latest
    environment:
      - "WATCHTOWER_SCHEDULE=0 0 4 * * *"
      # WATCHTOWER_RUN_ONCE: true
      - "WATCHTOWER_DEBUG=false"
      - "WATCHTOWER_CLEANUP=true"
      - "WATCHTOWER_INCLUDE_RESTARTING=true"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    restart: always
    include_global_env_vars: true
###
  - service_name: jellyfin
    image: jellyfin/jellyfin
    active: true
    include_global_env_vars: true
    volumes:
      - "{{appdata_path}}/jellyfin/config:/config"
      - "{{appdata_path}}/jellyfin/cache:/cache"
      - "{{ container_media_path }}:/data:ro"
      - "{{ appdata_path }}/jellyfin/transcode:/transcode"
    restart: 'unless-stopped'
    ports:
      - 8096:8096
    devices:
      - /dev/dri:/dev/dri
###
  - service_name: plex
    image: lscr.io/linuxserver/plex:latest
    active: true
    include_global_env_vars: true
    network_mode: host
    environment:
      - "VERSION=docker"
      - "PLEX_CLAIM=claim-XuZiyfMfXPH_49ec_gaC"
    volumes:
      - "{{appdata_path}}/plex/config:/config"
      - "{{ container_media_path }}:/data:ro"
      - "{{ appdata_path }}/plex/transcode:/transcode"
    devices:
      - /dev/dri:/dev/dri
    restart: unless-stopped
###
  - service_name: immich_server
    image: "ghcr.io/immich-app/immich-server:{{IMMICH_VERSION:-release}}"
    active: true
    include_global_env_vars: true
    # extends:
    #   file: hwaccel.transcoding.yml
    #   service: quicksync # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
    volumes:
      - "{{UPLOAD_LOCATION}}:/usr/src/app/upload"
      - /etc/localtime:/etc/localtime:ro
    ports:
      - 2283:3001
    depends_on:
      - redis
      - database
    restart: always
###
  - service_name: immich_machine_learning
    image: "ghcr.io/immich-app/immich-machine-learning:{{IMMICH_VERSION:-release}}"
    active: true
    include_global_env_vars: true
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
    #   file: hwaccel.ml.yml
    #   service: openvino-wsl # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference - use the `-wsl` version for WSL2 where applicable
    volumes:
      - "{{ appdata_path }}/immich/model-cache:/cache"
    restart: always
###
  - service_name: immich_redis
    image: docker.io/redis:6.2-alpine@sha256:d6c2911ac51b289db208767581a5d154544f2b2fe4914ea5056443f62dc6e900
    active: true
    healthcheck:
      test: redis-cli ping || exit 1
    restart: always
###
  - service_name: immich_postgres
    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    active: true
    environment:
      - POSTGRES_PASSWORD="{{DB_PASSWORD}}"
      - POSTGRES_USER="{{DB_USERNAME}}"
      - POSTGRES_DB="{{DB_DATABASE_NAME}}"
      - POSTGRES_INITDB_ARGS="'--data-checksums'"
    volumes:
      - "{{DB_DATA_LOCATION}}:/var/lib/postgresql/data"
    healthcheck:
      test: pg_isready --dbname='{{DB_DATABASE_NAME}}' || exit 1; Chksum="$$(psql --dbname='{{DB_DATABASE_NAME}}' --username='{{DB_USERNAME}}' --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_interval: 30s
      start_period: 5m
    command: ["postgres", "-c" ,"shared_preload_libraries=vectors.so", "-c", 'search_path="$$user", public, vectors', "-c", "logging_collector=on", "-c", "max_wal_size=2GB", "-c", "shared_buffers=512MB", "-c", "wal_compression=on"]
    restart: always
###
  - service_name:
    container_name: immich_db_dumper
    image: prodrigestivill/postgres-backup-local:14
    active: true
    environment:
      - POSTGRES_HOST="database"
      - POSTGRES_CLUSTER="TRUE"
      - POSTGRES_USER="{{DB_USERNAME}}"
      - POSTGRES_PASSWORD="{{DB_PASSWORD}}"
      - POSTGRES_DB="{{DB_DATABASE_NAME}}"
      - SCHEDULE="@daily"
      - POSTGRES_EXTRA_OPTS="--clean --if-exists"
      - BACKUP_DIR="/db_dumps"
    volumes:
      - "{{BACKUP_LOCATION}}:/db_dumps"
    depends_on:
      - database
    restart: always